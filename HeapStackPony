#pragma once
#include <iostream>

class Pony {

private:
	std::string name;
	int legs;

public:
	//Pony() = default;
	Pony(std::string PonyName, // constructor
		int PonyLegs);

	Pony(const Pony& CopyPony) // copy constructor
	{
		name = CopyPony.name;
		legs = CopyPony.legs;
		 
	};

	~Pony(); // destructor

	int GetPonyLegs() const { return legs; }
 
	std::string GetPonyName() const { return name; }

};

#include "Pony.h"
#include <iostream>

Pony::Pony(std::string Ponyname, int Ponylegs)
	: name(Ponyname), legs(Ponylegs)
{
	printf("Constructed\n");
}

Pony::~Pony()
{
	printf("destructed\n");
}

#include "Pony.h"
#include <iostream>


std::string PonyOnTheHeap(std::string& name) { return name; }

int PonyOnTheStack(int& legs) { return legs; }

//void functInputclass(const Pony& input) {}

int main()
{
	Pony PonyOnStack("Stack", 4);
	Pony* PonyOnHeap = new Pony("Heap", 3);

	//allocated on the heap
	std::string name = PonyOnHeap->GetPonyName();
	std::cout << "Heap Pony name: " << PonyOnTheHeap(name) << std::endl;
	delete PonyOnHeap;

	//allocated on the stack
	int legs = PonyOnStack.GetPonyLegs();
	std::cout << "Stack Pony legs: " << PonyOnTheStack(legs) << std::endl;

}
