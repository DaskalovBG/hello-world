#pragma once
#include<iostream>

class Brain {
private:
	int size;
	const double BrainWeigh = 1.5; // kg
	const long long int NerveCells = 86000000000;
public:

	//Brain() = default;

	Brain(int size, double BrainWeigh, const long long int NerveCells); // cstor

	Brain(const Brain& otherBrain); //coyp cstor

	~Brain(); // decstor

	Brain* operator&() const {
		return &Brain;
	}

	std::string identify();

};


#include "Brain.h"
#include <iostream>
Brain::Brain(int BrainSize, double BrainAvgWeigh, const long long int AvgNerveCells) 
	:
	size(BrainSize), BrainWeigh(BrainAvgWeigh), NerveCells(AvgNerveCells)
{
	std::cout << "Brain Constructed\n" << std::endl;
}

Brain::Brain(const Brain& otherBrain) : size(otherBrain.size), BrainWeigh(otherBrain.BrainWeigh), NerveCells(otherBrain.NerveCells)
{
	std::cout << "Brain Copy Constructed\n" << std::endl;
};


Brain::~Brain()
{
	std::cout << "Brain destructed" << std::endl;
}

std::string Brain::identify()
{
	Brain* brain_ptr;
	std::string brain_memory_address;
	brain_ptr = &brain_memory_address;

	return brain_memory_address;
}




#include <iostream>
#include <string>
#include "Brain.h"
int main() {

	/*std::string exercise_04_string = "Hi thi is brains";

	std::string exercise_04_string;

	exercise_04_string = "Hi thi is brains";

	std::string* pstr = &exercise_04_string;

	std::string& rstr = exercise_04_string;

	std::cout << "Printed via pointer: " << *pstr << std::endl;

	std::cout << "Printed via reference: " << rstr << std::endl; */

	Brain test_brain(100, 1.5, 5000);
	//Brain test_brain();

	//std::cout << &test_brain << std::endl;
}
